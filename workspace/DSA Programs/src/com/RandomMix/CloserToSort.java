package PractiseJavaPrograms;

public class CloserToSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
      String ab
    		
    		
      String[] abA = ab.split("\\s+");
      int[] arr = new int[abA.length];
      for(int i=0;i<arr.length;i++){
    	  arr[i] = Integer.parseInt(abA[i]);
      }
      int x = 873053;
      System.out.println("position "+closer(arr,arr.length,x));
	}
	static long closer(int arr[], int n, long x)
    {
        // add your code here
        int l=0,r=n-1;
        while(l<=r){
            int mid = l+(r-l)/2;
            System.out.println("arr mid "+arr[mid]);
            if(arr[mid] == x){
                return mid;
            }
            if(arr[mid-1] == x){
            	return mid-1;
            }
            if(arr[mid]>x && arr[mid+1]>x){
                r = mid-1;
            }else{
                l = mid+1;
            }
        }
        return -1l;
    }

}
